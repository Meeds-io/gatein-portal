<!--
This file is part of the Meeds project (https://meeds.io/).
Copyright (C) 2020 Meeds Association
contact@meeds.io
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public License
along with this program; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
-->
<%	
	import org.exoplatform.web.application.JavascriptManager;
	import org.exoplatform.portal.webui.util.Util ;
	import org.exoplatform.webui.organization.OrganizationUtils;
	import org.exoplatform.portal.mop.user.UserNode;
	import org.exoplatform.portal.mop.user.UserNavigation;
	import org.gatein.common.text.EntityEncoder;
	import javax.portlet.MimeResponse;
	import javax.portlet.ResourceURL;
	import org.exoplatform.portal.application.PortalRequestContext;
	import org.exoplatform.web.url.PortalURL;
	import org.exoplatform.web.url.navigation.NavigationResource;
	import org.exoplatform.portal.mop.SiteKey;
	import org.exoplatform.portal.mop.SiteType;

	def rcontext = _ctx.getRequestContext();
	JavascriptManager jsmanager = rcontext.getJavascriptManager();
	jsmanager.require("SHARED/navigation", "nav").addScripts("nav.UIPortalNavigation.onLoad('" + uicomponent.id + "');");
		
	def groupNavigations = uicomponent.getGroupNavigations();
	
	PortalRequestContext pcontext = Util.getPortalRequestContext(); 
	PortalURL nodeURL = nodeurl();
	
	void renderGroupPageNavigation(UserNavigation navigation, PortalURL nodeURL) {
			def nodes = uicomponent.getNavigationNodes(navigation);
			if(nodes.size() < 1) return ;
			String navTitle = _ctx.appRes("UIPageNavigation.label.titleBar") ;
			def ownerId = navigation.getKey().getName();
			navTitle = navTitle.replace("{0}", OrganizationUtils.getGroupLabel(ownerId));
			print """
						<li class="TitleBar portlet-menu-description" title="$ownerId">$navTitle</li>						
			""" ;
						for(UserNode node : nodes) {
						   renderPageNode(node, nodeURL);
						}	
	}
	
	void renderPageNode(UserNode node, PortalURL nodeURL) {
		UserNode selectedNode = uicomponent.getSelectedNode();
		String tabStyleNavigation = "";
		if(selectedNode != null && node.getURI() == selectedNode.getURI()) {
		   tabStyleNavigation = "SelectedItem portlet-menu-item-selected";
		}
		
		boolean hasChild = node.getChildrenCount() > 0;
		String clazz = "";
		if(hasChild) clazz = "ArrowIcon";
		String actionLink = nodeURL.setNode(node).toString();
		String icon = node.getIcon();
		if(icon == null) icon = "DefaultPageIcon";
		boolean toolong = (node.getResolvedLabel().length() > 60);
		String label = ( toolong ? HTMLEntityEncoder.getInstance().encode(node.getResolvedLabel().substring(0, 57) + "...") : node.getEncodedResolvedLabel());
		String title = "";
		if(toolong) title = "title='" + node.getEncodedResolvedLabel()  + "'";
		else title = "title='" + label + "'";

		def getNodeURL = "";
		if (hasChild) {
		    def groupId = node.getNavigation().getKey().getName();
			MimeResponse res = _ctx.getRequestContext().getResponse();
			
			ResourceURL resourceURL = res.createResourceURL();			
			resourceURL.setResourceID(groupId + "::" + node.getURI());	
			getNodeURL = "exo:getNodeURL='" + resourceURL.toString() + "'";
		}
		
		print """
		   <li class="MenuItem $clazz $tabStyleNavigation portlet-menu-cascade-item" $getNodeURL>
		""";
						if(node.pageRef != null) {
								print """<a class="ItemIcon $icon" href="$actionLink" $title>$label</a>""";
						} else {
								print """<a class="ItemIcon $icon" href="#$label" $title>$label</a>""";
						}
		if(hasChild) {
			print """
				<ul class="MenuItemContainer portlet-menu-cascade-separator skipHidden" style="position: absolute; display:block">					
			""" ;
				for(UserNode child : node.getChildren()) {
					renderPageNode(child, nodeURL);
				}
			print """				
				</ul>
			""" ;
			
		}
		print """
	       </li>  						
	    """ ;
	}	
	def currentPortal = pcontext.getPortalOwner();

%>
<ul class="UIUserToolBarGroupPortlet UIHorizontalTabs" id="$uicomponent.id" >
	<li class="UITab NormalToolbarTab portlet-menu-item">
		<a href="javascript:;" class="GroupIcon TBIcon" title="Group"><%=_ctx.appRes("UIUserToolBarGroupPortlet.header.group")%></a>
		<% if (!groupNavigations.isEmpty()) { %>
		<ul style="display:block" class="MenuItemContainer portlet-menu-cascade skipHidden">
		<% for(nav in groupNavigations) {
				renderGroupPageNavigation(nav, nodeURL);
		} %>
                  <li class="HorizontalSeparator"></li>
                    <li class="MenuItem portlet-menu-cascade-item">
                    <a class="EditorIcon TBIcon" href="<%=nodeURL.setResource(new NavigationResource(SiteType.PORTAL, currentPortal, "groupnavigation")).toString() %>" title="<%=_ctx.appRes("UIUserToolBarGroupPortlet.editGroup")%>"><%=_ctx.appRes("UIUserToolBarGroupPortlet.editGroup")%></a>
                  </li>

		</ul>
		<% } %>
	</li>
</ul>
